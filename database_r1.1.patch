diff -urN old/lib/backup.php new/lib/backup.php
--- old/lib/backup.php	Tue May 10 21:55:39 2022
+++ new/lib/backup.php	Sun Jun 19 12:10:23 2022
@@ -12,7 +12,7 @@
  * @author
  * @create
  * Copyright (C)
- *   2002-2016 PukiWiki Development Team
+ *   2002-2022 PukiWiki Development Team
  *   2001-2002 Originally written by yu-ji
  * License: GPL v2 or (at your option) any later version
  **/
@@ -33,6 +33,7 @@
 	global $cycle, $maxage;
 	global $do_backup, $del_backup;
 	global $auth_user;
+	global $database;
 
 	if (PKWK_READONLY || ! $do_backup) return;
 
@@ -84,6 +85,10 @@
 			$body_on_delete = PKWK_SPLITTER . ' ' . UTIME . "\n" . $wikitext;
 			$body_on_delete = preg_replace("/\n*$/", "\n", $body_on_delete);
 		}
+		if ($database) {
+			db_page_write(BACKUP_DB, $page, $strout . $body . $body_on_delete);
+			return;
+		}
 		$fp = _backup_fopen($page, 'wb')
 			or die_message('Cannot open ' . htmlsc(_backup_get_filename($page)) .
 			'<br />Maybe permission is not writable or filename is too long');
@@ -109,7 +114,15 @@
  */
 function get_backup($page, $age = 0)
 {
-	$lines = _backup_file($page);
+	global $database;
+	if ($database && exist_db_page(BACKUP_DB, $page)) {
+		$r = db_read(BACKUP_DB, "content", "page_name", $page)['content'];
+		preg_match_all("/.*?(?:$|\n).*?/", $r, $lines);
+		$lines = $lines[0];
+	} else {
+		$lines = _backup_file($page);
+	}
+	
 	if (! is_array($lines)) return array();
 
 	$_age = 0;
@@ -164,6 +177,9 @@
  */
 function _backup_file_exists($page)
 {
+	global $database;
+	if ($database && exist_db_page(BACKUP_DB, $page))
+		return true;
 	return file_exists(_backup_get_filename($page));
 }
 
@@ -179,6 +195,11 @@
 
 function _backup_get_filetime($page)
 {
+	global $database;
+	if ($database && exist_db_page(BACKUP_DB, $page)) {
+		return _backup_file_exists($page) ?
+			db_recordmtime($page, BACKUP_DB) - LOCALZONE : 0;
+	}
 	return _backup_file_exists($page) ?
 		filemtime(_backup_get_filename($page)) - LOCALZONE : 0;
 }
@@ -194,6 +215,10 @@
  */
 function _backup_delete($page)
 {
+	global $database;
+	if ($database && exist_db_page(BACKUP_DB, $page)) {
+		db_delete(BACKUP_DB, $page);
+	}
 	return unlink(_backup_get_filename($page));
 }
 
diff -urN old/lib/database.php new/lib/database.php
--- old/lib/database.php	Thu Jan  1 00:00:00 1970
+++ new/lib/database.php	Sun Jun 19 14:12:06 2022
@@ -0,0 +1,400 @@
+<?php
+// PukiWiki - Yet another WikiWikiWeb clone.
+// database.php
+// Copyright 2022 PukiWiki Development Team
+// License: GPL v2 or (at your option) any later version
+//
+// DataBase related function
+
+define("DATA_DB", $database_prefix . "page");
+define("DIFF_DB", $database_prefix . "diff");
+define("BACKUP_DB", $database_prefix . "backup");
+
+/**
+ * Setup database
+ */
+function db_init()
+{
+    global $database_dsn, $database_username, $database_password, $database_options, $database_timeout, $database_page_name_max_length;
+    try {
+        $pdo = new PDO($database_dsn, $database_username, $database_password, $database_options);
+        $pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
+        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
+        $pdo->setAttribute(PDO::ATTR_TIMEOUT, $database_timeout);
+        if (!exist_db_table(DATA_DB)) {
+            $pdo->exec(
+                "CREATE TABLE " . DATA_DB . " (
+page_name VARCHAR(" . $database_page_name_max_length . ") PRIMARY KEY,
+date DATETIME,
+content TEXT
+)"
+            );
+        }
+
+        if (!exist_db_table(DIFF_DB)) {
+            $pdo->exec(
+                "CREATE TABLE " . DIFF_DB . " (
+page_name VARCHAR(" . $database_page_name_max_length . ") PRIMARY KEY,
+date DATETIME,
+content TEXT
+)"
+            );
+        }
+
+        if (!exist_db_table(BACKUP_DB)) {
+            $pdo->exec(
+                "CREATE TABLE " . BACKUP_DB . " (
+page_name VARCHAR(" . $database_page_name_max_length . ") PRIMARY KEY,
+date DATETIME,
+content TEXT
+)"
+            );
+        }
+    } catch (PDOException $e) {
+        die_message("database.php: DataBase is not found or not readable.");
+    }
+}
+
+/**
+ * Get record
+ *
+ * @param $table table name
+ * @param $column Column name to get
+ * @param $where Search target column name 
+ * @param $target Target column value
+ * @return FALSE if error occurerd
+ */
+function db_read($table, $column, $where, $target)
+{
+    try {
+        global $database_dsn, $database_username, $database_password, $database_options, $database_timeout;
+        $pdo = new PDO($database_dsn, $database_username, $database_password, $database_options);
+        $pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
+        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
+        $pdo->setAttribute(PDO::ATTR_TIMEOUT, $database_timeout);
+        $stmt = $pdo->prepare("SELECT " . $column . " FROM " . $table . " WHERE " . $where . "=?");
+        $stmt->execute(array($target));
+        $r = $stmt->fetch();
+        return $r;
+    } catch (PDOException $e) {
+        return FALSE;
+    }
+}
+
+/**
+ * Set record
+ *
+ * @param $table table name
+ * @param $column Column name to set
+ * @param $value Value to write
+ * @param $where Search target column name 
+ * @param $target Target column value
+ * @param $mode h: head / f: foot / w: rewrite
+ * @return FALSE if error occurerd
+ */
+function db_write($table, $column, $value, $where, $target, $mode = 'w')
+{
+    try {
+        global $database_dsn, $database_username, $database_password, $database_options;
+        $pdo = new PDO($database_dsn, $database_username, $database_password, $database_options);
+        $pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
+        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
+        if (!exist_db_record($table, $where, $target)) {
+            $stmt = $pdo->prepare("INSERT INTO " . $table . " (" . $where . ", " . $column . ") VALUES(?, ?)");
+            $stmt->execute(array($target, $value));
+            $r = $stmt->fetch();
+            return $r;
+        }
+        $stmt = $pdo->prepare("UPDATE " . $table . " SET " . $column . "=? WHERE " . $where . "=?");
+        if ($mode === 'w') {
+            $stmt->execute(array($value, $target));
+        } else
+        if ($mode === 'h') {
+            $record = db_read($table, $column, $where, $target);
+            $stmt->execute(array($value . $record['content'], $target));
+        } else
+        if ($mode === 'f') {
+            $record = db_read($table, $column, $where, $target);
+            $stmt->execute(array($record['content'] . $value, $target));
+        } else {
+            die_message("database.php: the mode is wrong");
+        }
+        $r = $stmt->fetch();
+        return $r;
+    } catch (PDOException $e) {
+        return FALSE;
+    }
+}
+
+// rename column
+function db_rename($table, $old, $new) {
+    global $database_dsn, $database_username, $database_password, $database_options;
+    try {
+        $pdo = new PDO($database_dsn, $database_username, $database_password, $database_options);
+        $pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
+        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
+
+        $stmt = $pdo->prepare(
+            "UPDATE " . $table . " SET 
+page_name = ?
+WHERE page_name = ?
+"
+        );
+        $stmt->execute(array($new, $old));
+    } catch (Expection $e) {
+        die_message('database.php: Error occurred');
+    }
+}
+
+// delete record
+function db_delete($table, $page)
+{
+    try {
+        global $database_dsn, $database_username, $database_password, $database_options;
+        $pdo = new PDO($database_dsn, $database_username, $database_password, $database_options);
+        $pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
+        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
+        $stmt = $pdo->prepare("DELETE FROM " . $table . " WHERE page_name=?");
+        $stmt->execute(array($page));
+        return true;
+    } catch (PDOException $e) {
+        return FALSE;
+    }
+}
+
+/**
+ * Write to database
+ */
+function db_page_write($table, $page, $str, $notimestamp = FALSE, $is_delete = FALSE)
+{
+    global $database_dsn, $database_username, $database_password, $database_options;
+    global $whatsdeleted, $maxshow_deleted, $notify, $notify_diff_only, $notify_subject;
+
+    // Delete
+    if ($table == DATA_DB && $is_delete) {
+        // check
+        if (!exist_db_page($table, $page)) {
+            return;
+        }
+
+        add_recent($page, $whatsdeleted, '', $maxshow_deleted);
+
+        db_delete($table, $page);
+        lastmodified_add($whatsdeleted, $page);
+
+        // Clear is_page() cache
+        is_page($page, TRUE);
+
+        return;
+    } else if ($table == DIFF_DB && $str === " \n") {
+        return;
+    }
+
+    // check
+    $file_exists = false;
+    if (exist_db_page($table, $page)) {
+        $file_exists = true;
+    }
+
+    $timestamp = ($file_exists && $notimestamp) ? get_db_recordtime($page) : false;
+
+    // Update
+    try {
+        $pdo = new PDO($database_dsn, $database_username, $database_password, $database_options);
+        $pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
+        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
+
+        if (!$file_exists) {
+            // create
+            $date = date("y-m-d H:i:s");
+            $put_stmt = $pdo->prepare("INSERT INTO " . $table . " (page_name, date, content) VALUES(?, ?, ?)");
+            $put_stmt->execute(array($page, $date, $str));
+        } else {
+            $date = $notimestamp ? NULL : date("y-m-d H:i:s");
+            $put_stmt = $pdo->prepare(
+                "UPDATE " . $table . " SET 
+" . ($notimestamp ? "" : "date = ?,") . "
+content = ?
+WHERE page_name = ?
+"
+            );
+            if ($notimestamp) {
+                $put_stmt->execute(array($str, $page));
+            } else {
+                $put_stmt->execute(array($date, $str, $page));
+            }
+        }
+    } catch (Expection $e) {
+        die_message('database.php: Error occurred');
+    }
+
+    // Optional actions
+    if ($table == DATA_DB) {
+        if ($timestamp === false) {
+            lastmodified_add($page);
+        }
+
+        // Command execution per update
+        if (defined('PKWK_UPDATE_EXEC') && PKWK_UPDATE_EXEC)
+            system(PKWK_UPDATE_EXEC . ' > /dev/null &');
+    } else if ($table == DIFF_DB && $notify) {
+        if ($notify_diff_only) $str = preg_replace('/^[^-+].*\n/m', '', $str);
+        $footer['ACTION'] = 'Page update';
+        $footer['PAGE']   = $page;
+        $footer['URI']    = get_page_uri($page, PKWK_URI_ABSOLUTE);
+        $footer['USER_AGENT']  = TRUE;
+        $footer['REMOTE_ADDR'] = TRUE;
+        pkwk_mail_notify($notify_subject, $str, $footer) or
+            die_message('pkwk_mail_notify(): Failed');
+    }
+    if ($table == DIFF_DB) {
+        pkwk_log_updates($page, $str);
+    }
+
+    // Clear is_page() cache
+    is_page($page, TRUE);
+}
+
+function get_db_recordtime($page, $table = DATA_DB)
+{
+    if (exist_db_page($table, $page)) {
+        return db_recordmtime($page, $table) - LOCALZONE;
+    }
+    return 0;
+}
+
+function db_recordmtime($page, $table = DATA_DB)
+{
+    if (exist_db_page($table, $page)) {
+        $date = db_read($table, "date", "page_name", $page)['date'];
+        return strtotime($date);
+    }
+    return 0;
+}
+
+function exist_db_table($name)
+{
+    global $database_dsn, $database_username, $database_password, $database_options;
+    $pdo = new PDO($database_dsn, $database_username, $database_password, $database_options);
+    $pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
+    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
+    try {
+        $pdo->query("SELECT 1 FROM " . $name . " LIMIT 1");
+        return true;
+    } catch (Exception $e) {
+        return false;
+    }
+}
+
+function exist_db_page($table, $page)
+{
+    return exist_db_record($table, "page_name", $page);
+}
+
+function exist_db_record($table, $column, $value)
+{
+    if (db_read($table, $column, $column, $value) === false) {
+        return false;
+    }
+    return true;
+}
+
+// Output like backup gz
+function db_backup_output($table = BACKUP_DB, $dir = CACHE_DIR . "db/", $ext = BACKUP_EXT) {
+    if (!file_exists($dir)) mkdir($dir);
+    if (!file_exists($dir . db2dir($table, false))) mkdir($dir . db2dir($table, false));
+    $pages = create_db_existpages_list($table);
+    foreach ($pages as $dummy => $page) {
+        $r = db_read($table, "content, date", "page_name", $page);
+        $path = $dir . db2dir($table, false) . encode($page) . $ext;
+        $fp = gzopen($path, 'wb')
+            or die_message('Cannot open ' . htmlsc($path . encode($page) . BACKUP_EXT) .
+                '<br />Maybe permission is not writable or filename is too long');
+        _backup_fputs($fp, $r['content']);
+        _backup_fclose($fp);
+    }
+}
+
+// Output like wiki data
+function db_output($table = DATA_DB, $dir = CACHE_DIR . "db/", $ext = ".txt") {
+    if (!file_exists($dir)) mkdir($dir);
+    if (!file_exists($dir . db2dir($table, false))) mkdir($dir . db2dir($table, false));
+    $pages = create_db_existpages_list($table);
+    foreach ($pages as $dummy => $page) {
+        $r = db_read($table, "content, date", "page_name", $page);
+        $path = $dir . db2dir($table, false) . encode($page) . $ext;
+        file_put_contents($path, $r['content']);
+        touch($path, strtotime($r['date']));
+    }
+}
+
+// Create exist page list of data base
+function create_db_existpages_list($table = DATA_DB)
+{
+    global $database_dsn, $database_username, $database_password, $database_options;
+
+    if ($table == false)
+        return array();
+
+    $aryret = array();
+    $pdo = new PDO($database_dsn, $database_username, $database_password, $database_options);
+    $pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
+    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
+
+    $stmt = $pdo->prepare("SELECT page_name FROM " . $table);
+    $stmt->execute();
+    $r = $stmt->fetchAll();
+
+    // データベースから受け取った配列を整理
+    $aryret = array();
+    foreach ($r as $val) {
+        $name = $val['page_name'];
+        $aryret["db_" . $name] = $name;
+    }
+
+    return $aryret;
+}
+
+function db_record_count($table, $column_name = "*")
+{
+    global $database_dsn, $database_username, $database_password, $database_options;
+    $pdo = new PDO($database_dsn, $database_username, $database_password, $database_options);
+    $pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
+    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
+
+    $stmt = $pdo->prepare("SELECT COUNT(" . $column_name . ") FROM " . $table);
+    $stmt->execute();
+    return $stmt->fetchColumn();
+}
+
+function dir2db($dir)
+{
+    switch ($dir) {
+        case DATA_DIR:
+            return DATA_DB;
+        case DIFF_DIR:
+            return DIFF_DB;
+        case BACKUP_DIR:
+            return BACKUP_DB;
+        case 'wiki/':
+            return DATA_DB;
+        case 'diff/':
+            return DIFF_DB;
+        case 'backup/':
+            return BACKUP_DB;
+    }
+    return false;
+}
+
+function db2dir($db, $path = true)
+{
+    switch ($db) {
+        case DATA_DB:
+            return $path ? DATA_DIR : "wiki/";
+        case DIFF_DB:
+            return $path ? DIFF_DIR : "diff/";
+        case BACKUP_DB:
+            return $path ? BACKUP_DIR : "backup/";
+    }
+    return false;
+}
\ No newline at end of file
diff -urN old/lib/file.php new/lib/file.php
--- old/lib/file.php	Tue May 10 21:55:39 2022
+++ new/lib/file.php	Sun Jun 19 13:50:45 2022
@@ -29,11 +29,37 @@
  */
 function get_source($page = NULL, $lock = TRUE, $join = FALSE, $raw = FALSE)
 {
+	global $database;
+
 	//$result = NULL;	// File is not found
 	$result = $join ? '' : array();
-		// Compat for "implode('', get_source($file))",
-		// 	-- this is slower than "get_source($file, TRUE, TRUE)"
-		// Compat for foreach(get_source($file) as $line) {} not to warns
+	// Compat for "implode('', get_source($file))",
+	// 	-- this is slower than "get_source($file, TRUE, TRUE)"
+	// Compat for foreach(get_source($file) as $line) {} not to warns
+
+	if ($database && exist_db_page(DATA_DB, $page)) {
+		$r = db_read(DATA_DB, "content", "page_name", $page);
+		if ($r !== false) {
+			$result = $r['content'];
+			if ($join) {
+				if ($raw) {
+					return $result;
+				}
+				// Removing Carriage-Return
+				$result = str_replace("\r", '', $result);
+			} else {
+				preg_match_all("/.*?(?:$|\n).*?/", $result, $result);
+				$result = $result[0];
+				if ($result !== FALSE) {
+					// Removing Carriage-Return
+					$result = str_replace("\r", '', $result);
+				}
+			}
+		}
+		if ($result !== FALSE) {
+			return $result;
+		}
+	}
 
 	$path = get_filename($page);
 	if (file_exists($path)) {
@@ -82,6 +108,10 @@
 // Get last-modified filetime of the page
 function get_filetime($page)
 {
+	global $database;
+	if ($database && exist_db_page(DATA_DB, $page)) {
+		return get_db_recordtime($page);
+	}
 	return is_page($page) ? filemtime(get_filename($page)) - LOCALZONE : 0;
 }
 
@@ -92,6 +122,10 @@
  */
 function get_page_date_atom($page)
 {
+	global $database;
+	if ($database && exist_db_page(DATA_DB, $page)) {
+		return get_date_atom(db_recordmtime($page));
+	}
 	if (is_page($page)) {
 		return get_date_atom(filemtime(get_filename($page)));
 	}
@@ -108,6 +142,7 @@
 function page_write($page, $postdata, $notimestamp = FALSE)
 {
 	global $autoalias, $aliaspage;
+	global $database;
 
 	if (PKWK_READONLY) return; // Do nothing
 
@@ -129,13 +164,21 @@
 	}
 	// Create and write diff
 	$diffdata    = do_diff($oldpostdata, $postdata);
-	file_write(DIFF_DIR, $page, $diffdata);
+	if ($database) {
+		db_page_write(DIFF_DB, $page, $diffdata);
+	} else {
+		file_write(DIFF_DIR, $page, $diffdata);
+	}
 
 	// Create backup
 	make_backup($page, $is_delete, $postdata); // Is $postdata null?
 
 	// Create wiki text
-	file_write(DATA_DIR, $page, $postdata, $notimestamp, $is_delete);
+	if ($database) {
+		db_page_write(DATA_DB, $page, $postdata, $notimestamp, $is_delete);
+	} else {
+		file_write(DATA_DIR, $page, $postdata, $notimestamp, $is_delete);
+	}
 
 	links_update($page);
 
@@ -465,6 +508,7 @@
 function lastmodified_add($update = '', $remove = '')
 {
 	global $maxshow, $whatsnew, $autolink;
+	global $database;
 
 	// AutoLink implimentation needs everything, for now
 	if ($autolink) {
@@ -524,33 +568,45 @@
 	// ----
 	// Update the page 'RecentChanges'
 	$recent_pages = array_splice($recent_pages, 0, $maxshow);
-	$file = get_filename($whatsnew);
-
-	// Open
-	pkwk_touch_file($file);
-	$fp = fopen($file, 'r+') or
-		die_message('Cannot open ' . htmlsc($whatsnew));
-	set_file_buffer($fp, 0);
-	flock($fp, LOCK_EX);
 
-	// Recreate
-	ftruncate($fp, 0);
-	rewind($fp);
 	$do_diff = exist_plugin('diff');
-	foreach ($recent_pages as $_page=>$time) {
-		$line = get_recentchanges_line($_page, $time, $do_diff);
-		fputs($fp, $line);
-	}
-	fputs($fp, '#norelated' . "\n"); // :)
+	if ($database) {
+		$source = '';
+		foreach ($recent_pages as $_page => $time) {
+			$line = get_recentchanges_line($_page, $time, $do_diff);
+			$source .= $line;
+		}
+		$source .= '#norelated' . "\n";
+		db_write(DATA_DB, 'content', $source, 'page_name', $whatsnew);
+	} else {
+		$file = get_filename($whatsnew);
 
-	flock($fp, LOCK_UN);
-	fclose($fp);
+		// Open
+		pkwk_touch_file($file);
+		$fp = fopen($file, 'r+') or
+			die_message('Cannot open ' . htmlsc($whatsnew));
+		set_file_buffer($fp, 0);
+		flock($fp, LOCK_EX);
+
+		// Recreate
+		ftruncate($fp, 0);
+		rewind($fp);
+		foreach ($recent_pages as $_page => $time) {
+			$line = get_recentchanges_line($_page, $time, $do_diff);
+			fputs($fp, $line);
+		}
+		fputs($fp, '#norelated' . "\n"); // :)
+
+		flock($fp, LOCK_UN);
+		fclose($fp);
+	}
 }
 
 // Re-create PKWK_MAXSHOW_CACHE (Heavy)
 function put_lastmodified()
 {
 	global $maxshow, $whatsnew, $autolink;
+	global $database;
 
 	if (PKWK_READONLY) return; // Do nothing
 
@@ -592,28 +648,38 @@
 	fclose($fp);
 
 	// Create RecentChanges
-	$file = get_filename($whatsnew);
-	pkwk_touch_file($file);
-	$fp = fopen($file, 'r+') or
-		die_message('Cannot open ' . htmlsc($whatsnew));
-	set_file_buffer($fp, 0);
-	flock($fp, LOCK_EX);
-	ftruncate($fp, 0);
-	rewind($fp);
 	$do_diff = exist_plugin('diff');
-	foreach (array_keys($recent_pages) as $page) {
-		$time = $recent_pages[$page];
-		$line = get_recentchanges_line($page, $time, $do_diff);
-		fputs($fp, $line);
-	}
-	fputs($fp, '#norelated' . "\n"); // :)
-	flock($fp, LOCK_UN);
-	fclose($fp);
-
-	// For AutoLink
-	if ($autolink) {
-		autolink_pattern_write(CACHE_DIR . PKWK_AUTOLINK_REGEX_CACHE,
-			get_autolink_pattern($pages, $autolink));
+	if ($database) {
+		$source = '';
+		foreach ($recent_pages as $_page => $time) {
+			$line = get_recentchanges_line($_page, $time, $do_diff);
+			$source .= $line;
+		}
+		$source .= '#norelated' . "\n";
+		db_write(DATA_DB, 'content', $source, 'page_name', $whatsnew);
+	} else {
+		$file = get_filename($whatsnew);
+		pkwk_touch_file($file);
+		$fp = fopen($file, 'r+') or
+			die_message('Cannot open ' . htmlsc($whatsnew));
+		set_file_buffer($fp, 0);
+		flock($fp, LOCK_EX);
+		ftruncate($fp, 0);
+		rewind($fp);
+		foreach (array_keys($recent_pages) as $page) {
+			$time = $recent_pages[$page];
+			$line = get_recentchanges_line($page, $time, $do_diff);
+			fputs($fp, $line);
+		}
+		fputs($fp, '#norelated' . "\n"); // :)
+		flock($fp, LOCK_UN);
+		fclose($fp);
+
+		// For AutoLink
+		if ($autolink) {
+			autolink_pattern_write(CACHE_DIR . PKWK_AUTOLINK_REGEX_CACHE,
+				get_autolink_pattern($pages, $autolink));
+		}
 	}
 }
 
@@ -760,6 +826,7 @@
 // Get a page list of this wiki
 function get_existpages($dir = DATA_DIR, $ext = '.txt')
 {
+	global $database;
 	static $cached_list = null; // Cached wikitext page list
 	$use_cache = false;
 
@@ -780,6 +847,12 @@
 		}
 	}
 	closedir($dp);
+	
+	// DataBase
+	if ($database) {
+		// データベースのページもマージ
+		$aryret = array_merge($aryret, create_db_existpages_list(dir2db($dir)));
+	}
 	if ($use_cache) {
 		$cached_list = $aryret;
 	}
@@ -1119,3 +1192,23 @@
 function get_htmlsafe_filename($filename) {
 	return preg_replace('#[^\w\/\.\-\$\%]#', '', $filename);
 }
+
+/**
+ * Remove the entire directory
+ */
+function pkwk_remove_dir($dir){
+	$dp = @opendir($dir);
+	if ($dp === FALSE) {
+		die_message("file.php: " . $dir . ' is not found or not readable.');
+	}
+	while (($file = readdir($dp)) !== FALSE) {
+		$path = $dir . $file;
+		if ($file === '..' || $file === '.') continue;
+		if (is_dir($path)) {
+			pkwk_remove_dir($path);
+		}
+		@unlink($path);
+	}
+	closedir($dp);
+	@unlink($dir);
+}
\ No newline at end of file
diff -urN old/lib/func.php new/lib/func.php
--- old/lib/func.php	Tue May 10 21:55:39 2022
+++ new/lib/func.php	Sun Jun 19 12:10:23 2022
@@ -145,7 +145,11 @@
 // If the page exists
 function is_page($page, $clearcache = FALSE)
 {
+	global $database;
 	if ($clearcache) clearstatcache();
+	if ($database && exist_db_page(DATA_DB, $page)) {
+		return true;
+	}
 	return file_exists(get_filename($page));
 }
 
@@ -161,9 +165,14 @@
 
 function page_exists_in_history($page)
 {
+	global $database;
+
 	if (is_page($page)) {
 		return true;
 	}
+	if ($database && exist_db_page(DIFF_DB, $page)) {
+		return true;
+	}
 	$diff_file = DIFF_DIR . encode($page) . '.txt';
 	if (file_exists($diff_file)) {
 		return true;
@@ -194,6 +203,7 @@
 function is_freeze($page, $clearcache = FALSE)
 {
 	global $function_freeze;
+	global $database;
 	static $is_freeze = array();
 
 	if ($clearcache === TRUE) $is_freeze = array();
@@ -203,6 +213,11 @@
 		$is_freeze[$page] = FALSE;
 		return FALSE;
 	} else {
+		if ($database && exist_db_page(DATA_DB, $page)) {
+			$r = db_read(DATA_DB, "content", "page_name", $page);
+			$is_freeze[$page] = (bool) preg_match('/^#freeze$/m', $r['content']);
+			return $is_freeze[$page];
+		}
 		$fp = fopen(get_filename($page), 'rb') or
 			die('is_freeze(): fopen() failed: ' . htmlsc($page));
 		flock($fp, LOCK_SH) or die('is_freeze(): flock() failed');
@@ -1308,3 +1323,4 @@
 		}
 	}
 }
+
diff -urN old/lib/init.php new/lib/init.php
--- old/lib/init.php	Tue May 10 21:55:39 2022
+++ new/lib/init.php	Sat Jun 11 12:15:26 2022
@@ -480,3 +480,8 @@
 	'&amp;(#[0-9]+|#x[0-9a-f]+|' . get_html_entity_pattern() . ');' => '&$1;',
 	"\r"          => '<br />' . "\n",	/* 行末にチルダは改行 */
 ), $line_rules);
+
+// データベース初期セットアップ
+if ($database) {
+	db_init();
+}
diff -urN old/lib/pukiwiki.php new/lib/pukiwiki.php
--- old/lib/pukiwiki.php	Tue May 10 21:55:39 2022
+++ new/lib/pukiwiki.php	Sun Jun 12 16:56:10 2022
@@ -2,7 +2,7 @@
 // PukiWiki - Yet another WikiWikiWeb clone.
 // pukiwiki.php
 // Copyright
-//   2002-2016 PukiWiki Development Team
+//   2002-2022 PukiWiki Development Team
 //   2001-2002 Originally written by yu-ji
 // License: GPL v2 or (at your option) any later version
 //
@@ -17,6 +17,7 @@
 
 require(LIB_DIR . 'func.php');
 require(LIB_DIR . 'file.php');
+require(LIB_DIR . 'database.php');
 require(LIB_DIR . 'plugin.php');
 require(LIB_DIR . 'html.php');
 require(LIB_DIR . 'backup.php');
diff -urN old/plugin/diff.inc.php new/plugin/diff.inc.php
--- old/plugin/diff.inc.php	Tue May 10 21:55:39 2022
+++ new/plugin/diff.inc.php	Sun Jun 19 12:10:23 2022
@@ -2,7 +2,7 @@
 // PukiWiki - Yet another WikiWikiWeb clone.
 // diff.inc.php
 // Copyright
-//   2002-2017 PukiWiki Development Team
+//   2002-2022 PukiWiki Development Team
 //   2002      Originally written by yu-ji
 // License: GPL v2 or (at your option) any later version
 //
@@ -17,8 +17,12 @@
 
 	$action = isset($vars['action']) ? $vars['action'] : '';
 	switch ($action) {
-		case 'delete': $retval = plugin_diff_delete($page);	break;
-		default:       $retval = plugin_diff_view($page);	break;
+		case 'delete':
+			$retval = plugin_diff_delete($page);
+			break;
+		default:
+			$retval = plugin_diff_view($page);
+			break;
 	}
 	return $retval;
 }
@@ -28,6 +32,7 @@
 	global $hr;
 	global $_msg_notfound, $_msg_goto, $_msg_deleted, $_msg_addline, $_msg_delline, $_title_diff;
 	global $_title_diff_delete;
+	global $database;
 
 	$script = get_base_uri();
 	$r_page = pagename_urlencode($page);
@@ -47,8 +52,15 @@
 	}
 
 	$filename = DIFF_DIR . encode($page) . '.txt';
-	if (file_exists($filename)) {
-		if (! PKWK_READONLY) {
+	if ($database && exist_db_page(DIFF_DB, $page)) {
+		if (!PKWK_READONLY) {
+			$menu[] = '<li><a href="' . $script . '?cmd=diff&amp;action=delete&amp;page=' .
+				$r_page . '">' . str_replace('$1', $s_page, $_title_diff_delete) . '</a></li>';
+		}
+		$r = db_read(DIFF_DB, "content", "page_name", $page);
+		$msg = '<pre>' . diff_style_to_css(htmlsc($r['content'])) . '</pre>' . "\n";
+	} else if (file_exists($filename)) {
+		if (!PKWK_READONLY) {
 			$menu[] = '<li><a href="' . $script . '?cmd=diff&amp;action=delete&amp;page=' .
 				$r_page . '">' . str_replace('$1', $s_page, $_title_diff_delete) . '</a></li>';
 		}
diff -urN old/plugin/dump.inc.php new/plugin/dump.inc.php
--- old/plugin/dump.inc.php	Tue May 10 21:55:39 2022
+++ new/plugin/dump.inc.php	Sun Jun 19 11:56:05 2022
@@ -2,7 +2,7 @@
 // PukiWiki - Yet another WikiWikiWeb clone
 // dump.inc.php
 // Copyright
-//   2004-2021 PukiWiki Development Team
+//   2004-2022 PukiWiki Development Team
 //   2004      teanan / Interfair Laboratory
 // License: GPL v2 or (at your option) any later version
 //
@@ -98,6 +98,7 @@
 // ファイルのダウンロード
 function plugin_dump_download()
 {
+	global $database;
 	global $vars, $_STORAGE;
 
 	// アーカイブの種類
@@ -116,9 +117,24 @@
 	$tar->create(CACHE_DIR, $arc_kind) or
 		die_message('テンポラリファイルの生成に失敗しました。');
 
-	if ($bk_wiki)   $filecount += $tar->add_dir(DATA_DIR,   $_STORAGE['DATA_DIR']['add_filter'],   $namedecode);
+	if ($database) {
+		
+		// データベース
+		if ($bk_wiki) {
+			db_output(DATA_DB, CACHE_DIR . "db_dump/");
+			$filecount += $tar->add_dir(DATA_DIR,   $_STORAGE['DATA_DIR']['add_filter'],   $namedecode);
+		}
+		if ($bk_backup) {
+			db_output(BACKUP_DB, CACHE_DIR . "db_dump/");
+			$filecount += $tar->add_dir(BACKUP_DIR,   $_STORAGE['BACKUP_DIR']['add_filter'],   $namedecode);
+		}
+	} else {
+
+		// テキストファイル
+		if ($bk_wiki)   $filecount += $tar->add_dir(DATA_DIR,   $_STORAGE['DATA_DIR']['add_filter'],   $namedecode);
+		if ($bk_backup) $filecount += $tar->add_dir(BACKUP_DIR, $_STORAGE['BACKUP_DIR']['add_filter'], $namedecode);
+	}
 	if ($bk_attach) $filecount += $tar->add_dir(UPLOAD_DIR, $_STORAGE['UPLOAD_DIR']['add_filter'], $namedecode);
-	if ($bk_backup) $filecount += $tar->add_dir(BACKUP_DIR, $_STORAGE['BACKUP_DIR']['add_filter'], $namedecode);
 
 	$tar->close();
 
@@ -129,6 +145,7 @@
 		// ダウンロード
 		download_tarfile($tar->filename, $arc_kind);
 		@unlink($tar->filename);
+		pkwk_remove_dir(CACHE_DIR . "db_dump/");
 		exit;	// 正常終了
 	}
 }
@@ -138,6 +155,7 @@
 function plugin_dump_upload()
 {
 	global $vars, $_STORAGE;
+	global $database;
 
 	if (! PLUGIN_DUMP_ALLOW_RESTORE)
 		return array('code' => FALSE , 'msg' => 'Restoring function is not allowed');
@@ -186,6 +204,14 @@
 	$tar->close();
 	@unlink($uploadfile);
 
+	if ($database) {
+		foreach ($files as $file) {
+			$page = decode(pathinfo(basename($file), PATHINFO_FILENAME));
+			db_page_write(dir2db(dirname($file) . '/'), $page, file_get_contents($file));
+			unlink($file);
+		}
+	}
+
 	return array('code' => TRUE, 'msg' => $msg);
 }
 
diff -urN old/plugin/freeze.inc.php new/plugin/freeze.inc.php
--- old/plugin/freeze.inc.php	Tue May 10 21:55:39 2022
+++ new/plugin/freeze.inc.php	Sun Jun 19 12:10:23 2022
@@ -1,7 +1,7 @@
 <?php
 // PukiWiki - Yet another WikiWikiWeb clone.
 // freeze.inc.php
-// Copyright 2003-2017 PukiWiki Development Team
+// Copyright 2003-2022 PukiWiki Development Team
 // License: GPL v2 or (at your option) any later version
 //
 // Freeze(Lock) plugin
@@ -14,6 +14,7 @@
 	global $vars, $function_freeze;
 	global $_title_isfreezed, $_title_freezed, $_title_freeze;
 	global $_msg_invalidpass, $_msg_freezing, $_btn_freeze;
+	global $database;
 
 	$script = get_base_uri();
 	$page = isset($vars['page']) ? $vars['page'] : '';
@@ -32,14 +33,18 @@
 		// Freeze
 		$postdata = get_source($page);
 		array_unshift($postdata, "#freeze\n");
-		file_write(DATA_DIR, $page, join('', $postdata), TRUE);
+		if ($database && exist_db_page(DATA_DB, $page)) {
+			db_page_write(DATA_DB, $page, join('', $postdata), TRUE);
+		} else {
+			file_write(DATA_DIR, $page, join('', $postdata), TRUE);
+		}
 
 		// Update
 		is_freeze($page, TRUE);
 		$vars['cmd'] = 'read';
 		$msg  = & $_title_freezed;
 		$body = '';
-
+		
 	} else {
 		// Show a freeze form
 		$msg    = & $_title_freeze;
diff -urN old/plugin/rename.inc.php new/plugin/rename.inc.php
--- old/plugin/rename.inc.php	Tue May 10 21:55:39 2022
+++ new/plugin/rename.inc.php	Sun Jun 19 12:10:23 2022
@@ -1,7 +1,7 @@
 <?php
 // PukiWiki - Yet another WikiWikiWeb clone
 // rename.inc.php
-// Copyright 2002-2018 PukiWiki Development Team
+// Copyright 2002-2022 PukiWiki Development Team
 // License: GPL v2 or (at your option) any later version
 //
 // Rename plugin: Rename page-name and related data
@@ -213,10 +213,23 @@
 function plugin_rename_phase3($pages)
 {
 	global $_rename_messages;
+	global $database;
 
 	$script = get_base_uri();
 	$msg = $input = '';
+	$records = $exist_records = array();
 	$files = plugin_rename_get_files($pages);
+	if ($database) {
+		$records = plugin_rename_get_records($pages);
+
+		// 既に存在する変更後のページ名を取得
+		foreach ($records as $table=>$arr) {
+			foreach ($arr as $old => $new) {
+				if (exist_db_page($table, $new))
+					$exist_records[$table][$old] = $new;
+			}
+		}
+	}
 
 	$exists = array();
 	foreach ($files as $_page=>$arr)
@@ -226,6 +239,9 @@
 
 	$pass = plugin_rename_getvar('pass');
 	if ($pass != '' && pkwk_login($pass)) {
+		if ($database) {
+			plugin_rename_db_proceed($pages, $records, $exist_records);
+		}
 		return plugin_rename_proceed($pages, $files, $exists);
 	} else if ($pass != '') {
 		$msg = plugin_rename_err('adminpass');
@@ -326,6 +342,19 @@
 	return $files;
 }
 
+function plugin_rename_get_records($pages)
+{
+	$records = array();
+	$tables  = array(BACKUP_DB, DIFF_DB, DATA_DB);
+
+	foreach ($tables as $table) {
+		foreach ($pages as $from => $to) {
+			$records[$table][decode($from)] = decode($to);
+		}
+	}
+	return $records;
+}
+
 function plugin_rename_proceed($pages, $files, $exists)
 {
 	global $now, $_rename_messages;
@@ -400,6 +429,29 @@
 	exit;
 }
 
+function plugin_rename_db_proceed($pages, $records, $exists)
+{
+	if (plugin_rename_getvar('exist') == '')
+		foreach ($exists as $table => $arr) {
+			foreach ($arr as $old => $new) {
+				unset($pages[$table][$old]);
+			}
+		}
+
+	set_time_limit(0);
+	foreach ($records as $table => $arr) {
+		foreach ($arr as $old => $new) {
+			if (isset($exists[$table][$old]) && $exists[$table][$old])
+				unlink($new);
+			db_rename($table, $old, $new);
+		}
+		// linkデータベースを更新する BugTrack/327 arino
+		links_update($old);
+		links_update($new);
+	}
+	// Next: plugin_rename_proceed
+}
+
 function plugin_rename_getrelated($page)
 {
 	$related = array();
@@ -455,10 +507,20 @@
  * Return where the page exists or existed
  */
 function plugin_rename_is_page($page) {
+	global $database;
 	$enc = encode($page);
 	if (is_page($page)) {
 		return true;
 	}
+	if ($database) {
+		// DataBase
+		if (exist_db_page(DIFF_DB, $page)) {
+			true;
+		}
+		if (exist_db_page(BACKUP_DB, $page)) {
+			true;
+		}
+	}
 	if (file_exists(DIFF_DIR . $enc . '.txt')) {
 		return true;
 	}
diff -urN old/plugin/unfreeze.inc.php new/plugin/unfreeze.inc.php
--- old/plugin/unfreeze.inc.php	Tue May 10 21:55:39 2022
+++ new/plugin/unfreeze.inc.php	Sun Jun 19 12:10:23 2022
@@ -1,7 +1,7 @@
 <?php
 // PukiWiki - Yet another WikiWikiWeb clone.
 // unfreeze.inc.php
-// Copyright 2003-2017 PukiWiki Development Team
+// Copyright 2003-2022 PukiWiki Development Team
 // License: GPL v2 or (at your option) any later version
 //
 // Unfreeze(Unlock) plugin
@@ -14,6 +14,7 @@
 	global $vars, $function_freeze;
 	global $_title_isunfreezed, $_title_unfreezed, $_title_unfreeze;
 	global $_msg_invalidpass, $_msg_unfreezing, $_btn_unfreeze;
+	global $database;
 
 	$script = get_base_uri();
 	$page = isset($vars['page']) ? $vars['page'] : '';
@@ -37,7 +38,11 @@
 			}
 		}
 		$postdata = join('', $postdata);
-		file_write(DATA_DIR, $page, $postdata, TRUE);
+		if ($database && exist_db_page(DATA_DB, $page)) {
+			db_page_write(DATA_DB, $page, $postdata, TRUE);
+		} else {
+			file_write(DATA_DIR, $page, $postdata, TRUE);
+		}
 
 		// Update 
 		is_freeze($page, TRUE);
diff -urN old/pukiwiki.ini.php new/pukiwiki.ini.php
--- old/pukiwiki.ini.php	Sun Jun 12 17:14:49 2022
+++ new/pukiwiki.ini.php	Sun Jun 12 17:14:03 2022
@@ -201,6 +201,23 @@
 //$adminpass = '{SHA256}10/w7o2juYBrGMh32/KbveULW9jk2tejpyUAD+uC6PE=' // LDAP SHA256 'pass'
 
 /////////////////////////////////////////////////
+// Wiki data database setting
+$database = 1;
+
+// Data Source Name
+//$database_dsn = 'mysql:dbname=pukiwiki;host=127.0.0.1';
+$database_dsn = 'sqlite:' . DATA_DIR . 'pukiwiki.db';
+
+$database_username = 'admin';
+$database_password = 'pass';
+$database_prefix = '';
+$database_timeout = 30;
+$database_page_name_max_length = 190;
+$database_options = array(
+	//PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8mb4 COLLATE utf8mb4_bin"
+);
+
+/////////////////////////////////////////////////
 // Page-reading feature settings
 // (Automatically creating pronounce datas, for Kanji-included page names,
 //  to show sorted page-list correctly)
